import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray100,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 2,
        space: 2,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 16.fSize,
          fontFamily: 'Manrope',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray800.withOpacity(0.46),
          fontSize: 14.fSize,
          fontFamily: 'Abhaya Libre',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.deepOrange700.withOpacity(0.49),
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.green800,
          fontSize: 35.fSize,
          fontFamily: 'Abhaya Libre Medium',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 31.fSize,
          fontFamily: 'Abhaya Libre',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 27.fSize,
          fontFamily: 'Abhaya Libre',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 25.fSize,
          fontFamily: 'Abhaya Libre',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.yellow800,
          fontSize: 12.fSize,
          fontFamily: 'Abhaya Libre',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.greenA200,
          fontSize: 10.fSize,
          fontFamily: 'Abhaya Libre',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Abhaya Libre',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 16.fSize,
          fontFamily: 'Abhaya Libre',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 15.fSize,
          fontFamily: 'Abhaya Libre Medium',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFF9A84D),
    primaryContainer: Color(0XFFBE1414),
    secondaryContainer: Color(0XFF53E88B),

    // Error colors
    errorContainer: Color(0XFF828282),
    onError: Color(0XFFFBDF69),

    // On colors(text colors)
    onPrimary: Color(0XFF252525),
    onPrimaryContainer: Color(0XFFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFE14D);
  Color get amber800 => Color(0XFFFF9012);

  // Black
  Color get black900 => Color(0XFF09041B);
  Color get black90001 => Color(0XFF09051C);
  Color get black90002 => Color(0XFF000000);

  // Blue
  Color get blue50 => Color(0XFFDDEBFF);
  Color get blue700 => Color(0XFF0066EE);
  Color get blue800 => Color(0XFF2566AF);

  // BlueGray
  Color get blueGray200 => Color(0XFFB0BEC5);

  // Cyan
  Color get cyan90033 => Color(0X33134D5A);

  // DeepOrange
  Color get deepOrange700 => Color(0XFFDA6317);
  Color get deepOrangeA200 => Color(0XFFFF7B32);
  Color get deepOrangeA400 => Color(0XFFFF4600);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray400 => Color(0XFFBEBEBE);
  Color get gray700 => Color(0XFF8C466A);
  Color get gray800 => Color(0XFF3B3B3B);

  // Green
  Color get green800 => Color(0XFF008632);
  Color get greenA200 => Color(0XFF53E78B);
  Color get greenA700 => Color(0XFF14BE77);
  Color get greenA70001 => Color(0XFF10E43E);
  Color get greenA70091 => Color(0X911DFE41);

  // Indigo
  Color get indigo800 => Color(0XFF253B80);
  Color get indigoA20011 => Color(0X115A6CEA);

  // LightBlue
  Color get lightBlue300 => Color(0XFF4DD4FF);

  // LightGreen
  Color get lightGreen700 => Color(0XFF73A624);

  // Lime
  Color get lime50 => Color(0XFFFEF6ED);
  Color get lime800 => Color(0XFFBE7139);

  // Orange
  Color get orangeA200 => Color(0XFFF89945);
  Color get orangeA20001 => Color(0XFFE6A540);

  // Pink
  Color get pinkA700 => Color(0XFFB30F81);

  // Red
  Color get red500 => Color(0XFFEB4335);
  Color get red700 => Color(0XFFE21B1B);
  Color get red70001 => Color(0XFFDF2929);
  Color get red70002 => Color(0XFFDE2828);
  Color get red70003 => Color(0XFFD2312D);
  Color get redA200 => Color(0XFFFF4155);
  Color get redA400 => Color(0XFFFF1C1C);

  // Teal
  Color get teal300 => Color(0XFF3FDA85);
  Color get teal400 => Color(0XFF32BA7C);
  Color get teal40001 => Color(0XFF2ECF80);

  // White
  Color get whiteA700 => Color(0XFFFAFDFF);
  Color get whiteA70001 => Color(0XFFFEFEFF);

  // Yellow
  Color get yellow300 => Color(0XFFFBDF69);
  Color get yellow800 => Color(0XFFFEAD1D);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
